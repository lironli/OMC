services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181 

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
    ports:
      - "9094:9094"  # Outside listener
      - "9092:9092"  # Inside listener (optional, for testing)
    depends_on:
      - zookeeper

  sensor-registration:
    build:
      context: ./sensor-registration  
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092  # Connects to Kafka
    depends_on:
      - kafka
    ports:
      - "8081:8081"

  sensors-processing:
    build:
      context: ./sensors-processing 
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092  # Connects to Kafka
      MONGO_URI: mongodb://mongo:27017/sensor_data  # Connect to MongoDB
    depends_on:
      - kafka
      - mongo
    ports:
      - "8082:8082"


  sensors-reporting:
    build:
      context: ./sensors-reporting  
    environment:
      MONGO_URI: mongodb://mongo:27017/sensor_data  # Connect to MongoDB
    depends_on:
      - mongo  # Ensure this waits for MongoDB to be ready
    ports:
      - "8083:8083"

  history-breakdown:
    build:
      context: ./history-breakdown  # Adjust path if necessary
    ports:
      - "4200:80"  # Expose the Angular app
    depends_on:
      - sensors-reporting  # Ensure this waits for reporting service to be ready

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand({ connectionStatus: 1 })"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
